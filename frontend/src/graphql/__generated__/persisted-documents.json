{
  "b81aff00ca1f89dde18260c8f18c1501b018a5f3": "fragment BazelInvocationInfo on BazelInvocation { bazelCommand { cmdLine command executable explicitCmdLine explicitStartupOptions id residual startupOptions } build { buildUUID id } configurationMnemonic cpu endedAt hostname id invocationID isCiWorker metrics { actionSummary { actionCacheStatistics { hits id loadTimeInMs missDetails { count id reason } misses saveTimeInMs sizeInBytes } actionData { actionsCreated actionsExecuted firstStartedMs id lastEndedMs mnemonic systemTime userTime } actionsCreated actionsCreatedNotIncludingAspects actionsExecuted id remoteCacheHits runnerCount { actionsExecuted execKind id name } } artifactMetrics { id outputArtifactsFromActionCache { count id sizeInBytes } outputArtifactsSeen { count id sizeInBytes } sourceArtifactsRead { count id sizeInBytes } topLevelArtifacts { count id sizeInBytes } } buildGraphMetrics { actionCount actionLookupValueCount actionLookupValueCountNotIncludingAspects id inputFileConfiguredTargetCount otherConfiguredTargetCount outputArtifactCount outputFileConfiguredTargetCount postInvocationSkyframeNodeCount } cumulativeMetrics { id numAnalyses numBuilds } dynamicExecutionMetrics { id raceStatistics { id localRunner localWins mnemonic remoteRunner renoteWins } } id memoryMetrics { garbageMetrics { garbageCollected id type } id peakPostGcHeapSize peakPostGcTenuredSpaceHeapSize usedHeapSizePostBuild } networkMetrics { id systemNetworkStats { bytesRecv bytesSent id packetsRecv packetsSent peakBytesRecvPerSec peakBytesSentPerSec peakPacketsRecvPerSec peakPacketsSentPerSec } } packageMetrics { id packageLoadMetrics { computationSteps id loadDuration name numTargets numTransitiveLoads packageOverhead } packagesLoaded } targetMetrics { id targetsConfigured targetsConfiguredNotIncludingAspects targetsLoaded } timingMetrics { actionsExecutionStartInMs analysisPhaseTimeInMs cpuTimeInMs executionPhaseTimeInMs id wallTimeInMs } } numFetches profile { digest id name sizeInBytes } relatedFiles { name url } sourceControl { action actor branch commitSha eventName id job refs repoURL runID runnerArch runnerName runnerOs workflow workspace } startedAt state { bepCompleted buildEndTime buildStartTime exitCode { code id name } id } stepLabel targets { abortReason durationInMs id label success targetKind testSize } testCollection { cachedLocally cachedRemotely durationMs id label overallStatus strategy } user { Email LDAP } } fragment FullBazelInvocationDetails on BazelInvocation { ...BazelInvocationInfo } query LoadFullBazelInvocationDetails($invocationID: String!) { bazelInvocation(invocationId: $invocationID) { ...FullBazelInvocationDetails } }",
  "bb34b92cb4a11280082ec2332b06334a13cf4433": "fragment BlobReferenceInfo on BlobReference { availabilityStatus downloadURL ephemeralURL name sizeInBytes } fragment ProblemDetails on BazelInvocation { problems { ...ProblemInfo } } fragment ProblemInfo on Problem { __typename id label ... on ActionProblem { __typename id label stderr { ...BlobReferenceInfo } stdout { ...BlobReferenceInfo } type } ... on ProgressProblem { __typename id label output } ... on TargetProblem { __typename id label } ... on TestProblem { __typename id label results { __typename actionLogOutput { ...BlobReferenceInfo } attempt id run shard status undeclaredTestOutputs { ...BlobReferenceInfo } } status } } query GetProblemDetails($invocationID: String!) { bazelInvocation(invocationId: $invocationID) { ...ProblemDetails } }",
  "1e8efb549059b9fe79348092e6a23e7ea9b365f8": "fragment BlobReferenceInfo on BlobReference { availabilityStatus downloadURL ephemeralURL name sizeInBytes } query GetActionProblem($id: ID!) { node(id: $id) { id ... on ActionProblem { label stderr { ...BlobReferenceInfo } stdout { ...BlobReferenceInfo } } } }",
  "b95794cad1e5149e8a7239d2c71e936d924b14a8": "fragment BazelInvocationInfo on BazelInvocation { bazelCommand { cmdLine command executable explicitCmdLine explicitStartupOptions id residual startupOptions } build { buildUUID id } configurationMnemonic cpu endedAt hostname id invocationID isCiWorker metrics { actionSummary { actionCacheStatistics { hits id loadTimeInMs missDetails { count id reason } misses saveTimeInMs sizeInBytes } actionData { actionsCreated actionsExecuted firstStartedMs id lastEndedMs mnemonic systemTime userTime } actionsCreated actionsCreatedNotIncludingAspects actionsExecuted id remoteCacheHits runnerCount { actionsExecuted execKind id name } } artifactMetrics { id outputArtifactsFromActionCache { count id sizeInBytes } outputArtifactsSeen { count id sizeInBytes } sourceArtifactsRead { count id sizeInBytes } topLevelArtifacts { count id sizeInBytes } } buildGraphMetrics { actionCount actionLookupValueCount actionLookupValueCountNotIncludingAspects id inputFileConfiguredTargetCount otherConfiguredTargetCount outputArtifactCount outputFileConfiguredTargetCount postInvocationSkyframeNodeCount } cumulativeMetrics { id numAnalyses numBuilds } dynamicExecutionMetrics { id raceStatistics { id localRunner localWins mnemonic remoteRunner renoteWins } } id memoryMetrics { garbageMetrics { garbageCollected id type } id peakPostGcHeapSize peakPostGcTenuredSpaceHeapSize usedHeapSizePostBuild } networkMetrics { id systemNetworkStats { bytesRecv bytesSent id packetsRecv packetsSent peakBytesRecvPerSec peakBytesSentPerSec peakPacketsRecvPerSec peakPacketsSentPerSec } } packageMetrics { id packageLoadMetrics { computationSteps id loadDuration name numTargets numTransitiveLoads packageOverhead } packagesLoaded } targetMetrics { id targetsConfigured targetsConfiguredNotIncludingAspects targetsLoaded } timingMetrics { actionsExecutionStartInMs analysisPhaseTimeInMs cpuTimeInMs executionPhaseTimeInMs id wallTimeInMs } } numFetches profile { digest id name sizeInBytes } relatedFiles { name url } sourceControl { action actor branch commitSha eventName id job refs repoURL runID runnerArch runnerName runnerOs workflow workspace } startedAt state { bepCompleted buildEndTime buildStartTime exitCode { code id name } id } stepLabel targets { abortReason durationInMs id label success targetKind testSize } testCollection { cachedLocally cachedRemotely durationMs id label overallStatus strategy } user { Email LDAP } } fragment FullBazelInvocationDetails on BazelInvocation { ...BazelInvocationInfo } query FindBuildByUUID($url: String, $uuid: UUID) { getBuild(buildURL: $url, buildUUID: $uuid) { buildURL buildUUID env { key value } id invocations { ...FullBazelInvocationDetails } timestamp } }",
  "45528b39e6234ab4c14e4ade920240652d8961e8": "query GetTargetsWithOffset($direction: String, $label: String, $limit: Int, $offset: Int, $sortBy: String) { getTargetsWithOffset( label: $label offset: $offset limit: $limit sortBy: $sortBy direction: $direction ) { result { avg count label max min passRate sum } total } }",
  "f4e866e3a87835a6ea5e334117dc69417e8cda19": "query FindTargets($after: Cursor, $first: Int!, $orderBy: TargetPairOrder, $where: TargetPairWhereInput) { findTargets(first: $first, where: $where, orderBy: $orderBy, after: $after) { edges { node { bazelInvocation { invocationID } durationInMs id label success } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } totalCount } }",
  "a58c22b2db5f30d1dba201fe125838c7f14d5e6d": "query GetTestsWithOffset($direction: String, $label: String, $limit: Int, $offset: Int, $sortBy: String) { getTestsWithOffset( label: $label offset: $offset limit: $limit sortBy: $sortBy direction: $direction ) { result { avg count label max min passRate sum } total } }",
  "0125ec580cc0dba1b90f091f83f0aba0b1549311": "query GetUniqueTestLabels { getUniqueTestLabels }",
  "1849a9864fcfcecf29b462f0b9c9275fa2dd49ef": "query GetAveragePassPercentageForLabel($label: String!) { getAveragePassPercentageForLabel(label: $label) }",
  "4b5a5a8301688612cd07d393bc301156ffba05c7": "query GetTestDurationAggregation($label: String) { getTestDurationAggregation(label: $label) { count label max min sum } }",
  "17231025ad382237c09f082d9e94e39118d8502d": "query FindTests($after: Cursor, $first: Int!, $orderBy: TestCollectionOrder, $where: TestCollectionWhereInput) { findTests(first: $first, where: $where, orderBy: $orderBy, after: $after) { edges { node { bazelInvocation { invocationID } durationMs firstSeen id label overallStatus } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } totalCount } }",
  "707420fe8ea691631ecc9c431896b8e8d6b62692": "query FindBuildTimes($first: Int!, $where: BazelInvocationWhereInput) { findBazelInvocations(first: $first, where: $where) { edges { node { endedAt invocationID startedAt } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } totalCount } }",
  "7151b14bba5e7ea3e0f6e50882cc2f429591feb9": "fragment BazelInvocationNode on BazelInvocation { build { buildUUID } endedAt id invocationID startedAt state { bepCompleted exitCode { code name } } user { Email LDAP } } query FindBazelInvocations($first: Int!, $where: BazelInvocationWhereInput) { findBazelInvocations(first: $first, where: $where) { edges { node { ...BazelInvocationNode } } } }",
  "f1d6d4ca1f94f09f0cde26127d88f438e7b81111": "fragment BuildNode on Build { buildURL buildUUID id timestamp } query FindBuilds($first: Int!, $where: BuildWhereInput) { findBuilds(first: $first, where: $where) { edges { node { ...BuildNode } } } }",
  "add15b38babd589a6f929f238d8f8f03392ad43b": "query FindTestsWithCache($after: Cursor, $first: Int!, $orderBy: TestCollectionOrder, $where: TestCollectionWhereInput) { findTests(first: $first, where: $where, orderBy: $orderBy, after: $after) { edges { node { bazelInvocation { invocationID } cachedLocally cachedRemotely durationMs firstSeen id label overallStatus } } pageInfo { endCursor hasNextPage hasPreviousPage startCursor } totalCount } }"
}