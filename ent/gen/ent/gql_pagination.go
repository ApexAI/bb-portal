// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocation"
	"github.com/buildbarn/bb-portal/ent/gen/ent/bazelinvocationproblem"
	"github.com/buildbarn/bb-portal/ent/gen/ent/blob"
	"github.com/buildbarn/bb-portal/ent/gen/ent/build"
	"github.com/buildbarn/bb-portal/ent/gen/ent/eventfile"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// BazelInvocationEdge is the edge representation of BazelInvocation.
type BazelInvocationEdge struct {
	Node   *BazelInvocation `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// BazelInvocationConnection is the connection containing edges to BazelInvocation.
type BazelInvocationConnection struct {
	Edges      []*BazelInvocationEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *BazelInvocationConnection) build(nodes []*BazelInvocation, pager *bazelinvocationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *BazelInvocation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *BazelInvocation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *BazelInvocation {
			return nodes[i]
		}
	}
	c.Edges = make([]*BazelInvocationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BazelInvocationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BazelInvocationPaginateOption enables pagination customization.
type BazelInvocationPaginateOption func(*bazelinvocationPager) error

// WithBazelInvocationOrder configures pagination ordering.
func WithBazelInvocationOrder(order *BazelInvocationOrder) BazelInvocationPaginateOption {
	if order == nil {
		order = DefaultBazelInvocationOrder
	}
	o := *order
	return func(pager *bazelinvocationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBazelInvocationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBazelInvocationFilter configures pagination filter.
func WithBazelInvocationFilter(filter func(*BazelInvocationQuery) (*BazelInvocationQuery, error)) BazelInvocationPaginateOption {
	return func(pager *bazelinvocationPager) error {
		if filter == nil {
			return errors.New("BazelInvocationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type bazelinvocationPager struct {
	reverse bool
	order   *BazelInvocationOrder
	filter  func(*BazelInvocationQuery) (*BazelInvocationQuery, error)
}

func newBazelInvocationPager(opts []BazelInvocationPaginateOption, reverse bool) (*bazelinvocationPager, error) {
	pager := &bazelinvocationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBazelInvocationOrder
	}
	return pager, nil
}

func (p *bazelinvocationPager) applyFilter(query *BazelInvocationQuery) (*BazelInvocationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *bazelinvocationPager) toCursor(bi *BazelInvocation) Cursor {
	return p.order.Field.toCursor(bi)
}

func (p *bazelinvocationPager) applyCursors(query *BazelInvocationQuery, after, before *Cursor) (*BazelInvocationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBazelInvocationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *bazelinvocationPager) applyOrder(query *BazelInvocationQuery) *BazelInvocationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBazelInvocationOrder.Field {
		query = query.Order(DefaultBazelInvocationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *bazelinvocationPager) orderExpr(query *BazelInvocationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBazelInvocationOrder.Field {
			b.Comma().Ident(DefaultBazelInvocationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to BazelInvocation.
func (bi *BazelInvocationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BazelInvocationPaginateOption,
) (*BazelInvocationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBazelInvocationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if bi, err = pager.applyFilter(bi); err != nil {
		return nil, err
	}
	conn := &BazelInvocationConnection{Edges: []*BazelInvocationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := bi.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if bi, err = pager.applyCursors(bi, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		bi.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := bi.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	bi = pager.applyOrder(bi)
	nodes, err := bi.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BazelInvocationOrderField defines the ordering field of BazelInvocation.
type BazelInvocationOrderField struct {
	// Value extracts the ordering value from the given BazelInvocation.
	Value    func(*BazelInvocation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) bazelinvocation.OrderOption
	toCursor func(*BazelInvocation) Cursor
}

// BazelInvocationOrder defines the ordering of BazelInvocation.
type BazelInvocationOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *BazelInvocationOrderField `json:"field"`
}

// DefaultBazelInvocationOrder is the default ordering of BazelInvocation.
var DefaultBazelInvocationOrder = &BazelInvocationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BazelInvocationOrderField{
		Value: func(bi *BazelInvocation) (ent.Value, error) {
			return bi.ID, nil
		},
		column: bazelinvocation.FieldID,
		toTerm: bazelinvocation.ByID,
		toCursor: func(bi *BazelInvocation) Cursor {
			return Cursor{ID: bi.ID}
		},
	},
}

// ToEdge converts BazelInvocation into BazelInvocationEdge.
func (bi *BazelInvocation) ToEdge(order *BazelInvocationOrder) *BazelInvocationEdge {
	if order == nil {
		order = DefaultBazelInvocationOrder
	}
	return &BazelInvocationEdge{
		Node:   bi,
		Cursor: order.Field.toCursor(bi),
	}
}

// BazelInvocationProblemEdge is the edge representation of BazelInvocationProblem.
type BazelInvocationProblemEdge struct {
	Node   *BazelInvocationProblem `json:"node"`
	Cursor Cursor                  `json:"cursor"`
}

// BazelInvocationProblemConnection is the connection containing edges to BazelInvocationProblem.
type BazelInvocationProblemConnection struct {
	Edges      []*BazelInvocationProblemEdge `json:"edges"`
	PageInfo   PageInfo                      `json:"pageInfo"`
	TotalCount int                           `json:"totalCount"`
}

func (c *BazelInvocationProblemConnection) build(nodes []*BazelInvocationProblem, pager *bazelinvocationproblemPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *BazelInvocationProblem
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *BazelInvocationProblem {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *BazelInvocationProblem {
			return nodes[i]
		}
	}
	c.Edges = make([]*BazelInvocationProblemEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BazelInvocationProblemEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BazelInvocationProblemPaginateOption enables pagination customization.
type BazelInvocationProblemPaginateOption func(*bazelinvocationproblemPager) error

// WithBazelInvocationProblemOrder configures pagination ordering.
func WithBazelInvocationProblemOrder(order *BazelInvocationProblemOrder) BazelInvocationProblemPaginateOption {
	if order == nil {
		order = DefaultBazelInvocationProblemOrder
	}
	o := *order
	return func(pager *bazelinvocationproblemPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBazelInvocationProblemOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBazelInvocationProblemFilter configures pagination filter.
func WithBazelInvocationProblemFilter(filter func(*BazelInvocationProblemQuery) (*BazelInvocationProblemQuery, error)) BazelInvocationProblemPaginateOption {
	return func(pager *bazelinvocationproblemPager) error {
		if filter == nil {
			return errors.New("BazelInvocationProblemQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type bazelinvocationproblemPager struct {
	reverse bool
	order   *BazelInvocationProblemOrder
	filter  func(*BazelInvocationProblemQuery) (*BazelInvocationProblemQuery, error)
}

func newBazelInvocationProblemPager(opts []BazelInvocationProblemPaginateOption, reverse bool) (*bazelinvocationproblemPager, error) {
	pager := &bazelinvocationproblemPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBazelInvocationProblemOrder
	}
	return pager, nil
}

func (p *bazelinvocationproblemPager) applyFilter(query *BazelInvocationProblemQuery) (*BazelInvocationProblemQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *bazelinvocationproblemPager) toCursor(bip *BazelInvocationProblem) Cursor {
	return p.order.Field.toCursor(bip)
}

func (p *bazelinvocationproblemPager) applyCursors(query *BazelInvocationProblemQuery, after, before *Cursor) (*BazelInvocationProblemQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBazelInvocationProblemOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *bazelinvocationproblemPager) applyOrder(query *BazelInvocationProblemQuery) *BazelInvocationProblemQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBazelInvocationProblemOrder.Field {
		query = query.Order(DefaultBazelInvocationProblemOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *bazelinvocationproblemPager) orderExpr(query *BazelInvocationProblemQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBazelInvocationProblemOrder.Field {
			b.Comma().Ident(DefaultBazelInvocationProblemOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to BazelInvocationProblem.
func (bip *BazelInvocationProblemQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BazelInvocationProblemPaginateOption,
) (*BazelInvocationProblemConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBazelInvocationProblemPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if bip, err = pager.applyFilter(bip); err != nil {
		return nil, err
	}
	conn := &BazelInvocationProblemConnection{Edges: []*BazelInvocationProblemEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := bip.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if bip, err = pager.applyCursors(bip, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		bip.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := bip.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	bip = pager.applyOrder(bip)
	nodes, err := bip.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BazelInvocationProblemOrderField defines the ordering field of BazelInvocationProblem.
type BazelInvocationProblemOrderField struct {
	// Value extracts the ordering value from the given BazelInvocationProblem.
	Value    func(*BazelInvocationProblem) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) bazelinvocationproblem.OrderOption
	toCursor func(*BazelInvocationProblem) Cursor
}

// BazelInvocationProblemOrder defines the ordering of BazelInvocationProblem.
type BazelInvocationProblemOrder struct {
	Direction OrderDirection                    `json:"direction"`
	Field     *BazelInvocationProblemOrderField `json:"field"`
}

// DefaultBazelInvocationProblemOrder is the default ordering of BazelInvocationProblem.
var DefaultBazelInvocationProblemOrder = &BazelInvocationProblemOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BazelInvocationProblemOrderField{
		Value: func(bip *BazelInvocationProblem) (ent.Value, error) {
			return bip.ID, nil
		},
		column: bazelinvocationproblem.FieldID,
		toTerm: bazelinvocationproblem.ByID,
		toCursor: func(bip *BazelInvocationProblem) Cursor {
			return Cursor{ID: bip.ID}
		},
	},
}

// ToEdge converts BazelInvocationProblem into BazelInvocationProblemEdge.
func (bip *BazelInvocationProblem) ToEdge(order *BazelInvocationProblemOrder) *BazelInvocationProblemEdge {
	if order == nil {
		order = DefaultBazelInvocationProblemOrder
	}
	return &BazelInvocationProblemEdge{
		Node:   bip,
		Cursor: order.Field.toCursor(bip),
	}
}

// BlobEdge is the edge representation of Blob.
type BlobEdge struct {
	Node   *Blob  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// BlobConnection is the connection containing edges to Blob.
type BlobConnection struct {
	Edges      []*BlobEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *BlobConnection) build(nodes []*Blob, pager *blobPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Blob
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Blob {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Blob {
			return nodes[i]
		}
	}
	c.Edges = make([]*BlobEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BlobEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BlobPaginateOption enables pagination customization.
type BlobPaginateOption func(*blobPager) error

// WithBlobOrder configures pagination ordering.
func WithBlobOrder(order *BlobOrder) BlobPaginateOption {
	if order == nil {
		order = DefaultBlobOrder
	}
	o := *order
	return func(pager *blobPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBlobOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBlobFilter configures pagination filter.
func WithBlobFilter(filter func(*BlobQuery) (*BlobQuery, error)) BlobPaginateOption {
	return func(pager *blobPager) error {
		if filter == nil {
			return errors.New("BlobQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type blobPager struct {
	reverse bool
	order   *BlobOrder
	filter  func(*BlobQuery) (*BlobQuery, error)
}

func newBlobPager(opts []BlobPaginateOption, reverse bool) (*blobPager, error) {
	pager := &blobPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBlobOrder
	}
	return pager, nil
}

func (p *blobPager) applyFilter(query *BlobQuery) (*BlobQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *blobPager) toCursor(b *Blob) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *blobPager) applyCursors(query *BlobQuery, after, before *Cursor) (*BlobQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBlobOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *blobPager) applyOrder(query *BlobQuery) *BlobQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBlobOrder.Field {
		query = query.Order(DefaultBlobOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *blobPager) orderExpr(query *BlobQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBlobOrder.Field {
			b.Comma().Ident(DefaultBlobOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Blob.
func (b *BlobQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BlobPaginateOption,
) (*BlobConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBlobPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BlobConnection{Edges: []*BlobEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := b.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BlobOrderField defines the ordering field of Blob.
type BlobOrderField struct {
	// Value extracts the ordering value from the given Blob.
	Value    func(*Blob) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) blob.OrderOption
	toCursor func(*Blob) Cursor
}

// BlobOrder defines the ordering of Blob.
type BlobOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *BlobOrderField `json:"field"`
}

// DefaultBlobOrder is the default ordering of Blob.
var DefaultBlobOrder = &BlobOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BlobOrderField{
		Value: func(b *Blob) (ent.Value, error) {
			return b.ID, nil
		},
		column: blob.FieldID,
		toTerm: blob.ByID,
		toCursor: func(b *Blob) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Blob into BlobEdge.
func (b *Blob) ToEdge(order *BlobOrder) *BlobEdge {
	if order == nil {
		order = DefaultBlobOrder
	}
	return &BlobEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// BuildEdge is the edge representation of Build.
type BuildEdge struct {
	Node   *Build `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// BuildConnection is the connection containing edges to Build.
type BuildConnection struct {
	Edges      []*BuildEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *BuildConnection) build(nodes []*Build, pager *buildPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Build
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Build {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Build {
			return nodes[i]
		}
	}
	c.Edges = make([]*BuildEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BuildEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BuildPaginateOption enables pagination customization.
type BuildPaginateOption func(*buildPager) error

// WithBuildOrder configures pagination ordering.
func WithBuildOrder(order *BuildOrder) BuildPaginateOption {
	if order == nil {
		order = DefaultBuildOrder
	}
	o := *order
	return func(pager *buildPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBuildOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBuildFilter configures pagination filter.
func WithBuildFilter(filter func(*BuildQuery) (*BuildQuery, error)) BuildPaginateOption {
	return func(pager *buildPager) error {
		if filter == nil {
			return errors.New("BuildQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type buildPager struct {
	reverse bool
	order   *BuildOrder
	filter  func(*BuildQuery) (*BuildQuery, error)
}

func newBuildPager(opts []BuildPaginateOption, reverse bool) (*buildPager, error) {
	pager := &buildPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBuildOrder
	}
	return pager, nil
}

func (p *buildPager) applyFilter(query *BuildQuery) (*BuildQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *buildPager) toCursor(b *Build) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *buildPager) applyCursors(query *BuildQuery, after, before *Cursor) (*BuildQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBuildOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *buildPager) applyOrder(query *BuildQuery) *BuildQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBuildOrder.Field {
		query = query.Order(DefaultBuildOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *buildPager) orderExpr(query *BuildQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBuildOrder.Field {
			b.Comma().Ident(DefaultBuildOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Build.
func (b *BuildQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BuildPaginateOption,
) (*BuildConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBuildPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BuildConnection{Edges: []*BuildEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := b.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BuildOrderField defines the ordering field of Build.
type BuildOrderField struct {
	// Value extracts the ordering value from the given Build.
	Value    func(*Build) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) build.OrderOption
	toCursor func(*Build) Cursor
}

// BuildOrder defines the ordering of Build.
type BuildOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *BuildOrderField `json:"field"`
}

// DefaultBuildOrder is the default ordering of Build.
var DefaultBuildOrder = &BuildOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BuildOrderField{
		Value: func(b *Build) (ent.Value, error) {
			return b.ID, nil
		},
		column: build.FieldID,
		toTerm: build.ByID,
		toCursor: func(b *Build) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Build into BuildEdge.
func (b *Build) ToEdge(order *BuildOrder) *BuildEdge {
	if order == nil {
		order = DefaultBuildOrder
	}
	return &BuildEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// EventFileEdge is the edge representation of EventFile.
type EventFileEdge struct {
	Node   *EventFile `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// EventFileConnection is the connection containing edges to EventFile.
type EventFileConnection struct {
	Edges      []*EventFileEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *EventFileConnection) build(nodes []*EventFile, pager *eventfilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *EventFile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *EventFile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *EventFile {
			return nodes[i]
		}
	}
	c.Edges = make([]*EventFileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EventFileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EventFilePaginateOption enables pagination customization.
type EventFilePaginateOption func(*eventfilePager) error

// WithEventFileOrder configures pagination ordering.
func WithEventFileOrder(order *EventFileOrder) EventFilePaginateOption {
	if order == nil {
		order = DefaultEventFileOrder
	}
	o := *order
	return func(pager *eventfilePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEventFileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEventFileFilter configures pagination filter.
func WithEventFileFilter(filter func(*EventFileQuery) (*EventFileQuery, error)) EventFilePaginateOption {
	return func(pager *eventfilePager) error {
		if filter == nil {
			return errors.New("EventFileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type eventfilePager struct {
	reverse bool
	order   *EventFileOrder
	filter  func(*EventFileQuery) (*EventFileQuery, error)
}

func newEventFilePager(opts []EventFilePaginateOption, reverse bool) (*eventfilePager, error) {
	pager := &eventfilePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEventFileOrder
	}
	return pager, nil
}

func (p *eventfilePager) applyFilter(query *EventFileQuery) (*EventFileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *eventfilePager) toCursor(ef *EventFile) Cursor {
	return p.order.Field.toCursor(ef)
}

func (p *eventfilePager) applyCursors(query *EventFileQuery, after, before *Cursor) (*EventFileQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultEventFileOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *eventfilePager) applyOrder(query *EventFileQuery) *EventFileQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultEventFileOrder.Field {
		query = query.Order(DefaultEventFileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *eventfilePager) orderExpr(query *EventFileQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEventFileOrder.Field {
			b.Comma().Ident(DefaultEventFileOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to EventFile.
func (ef *EventFileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EventFilePaginateOption,
) (*EventFileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEventFilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ef, err = pager.applyFilter(ef); err != nil {
		return nil, err
	}
	conn := &EventFileConnection{Edges: []*EventFileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ef.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ef, err = pager.applyCursors(ef, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ef.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ef.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ef = pager.applyOrder(ef)
	nodes, err := ef.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// EventFileOrderField defines the ordering field of EventFile.
type EventFileOrderField struct {
	// Value extracts the ordering value from the given EventFile.
	Value    func(*EventFile) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) eventfile.OrderOption
	toCursor func(*EventFile) Cursor
}

// EventFileOrder defines the ordering of EventFile.
type EventFileOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *EventFileOrderField `json:"field"`
}

// DefaultEventFileOrder is the default ordering of EventFile.
var DefaultEventFileOrder = &EventFileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &EventFileOrderField{
		Value: func(ef *EventFile) (ent.Value, error) {
			return ef.ID, nil
		},
		column: eventfile.FieldID,
		toTerm: eventfile.ByID,
		toCursor: func(ef *EventFile) Cursor {
			return Cursor{ID: ef.ID}
		},
	},
}

// ToEdge converts EventFile into EventFileEdge.
func (ef *EventFile) ToEdge(order *EventFileOrder) *EventFileEdge {
	if order == nil {
		order = DefaultEventFileOrder
	}
	return &EventFileEdge{
		Node:   ef,
		Cursor: order.Field.toCursor(ef),
	}
}
