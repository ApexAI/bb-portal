// Code generated by ent, DO NOT EDIT.

package sourcecontrol

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/buildbarn/bb-portal/ent/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLTE(FieldID, id))
}

// RepoURL applies equality check predicate on the "repo_url" field. It's identical to RepoURLEQ.
func RepoURL(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldRepoURL, v))
}

// Branch applies equality check predicate on the "branch" field. It's identical to BranchEQ.
func Branch(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldBranch, v))
}

// CommitSha applies equality check predicate on the "commit_sha" field. It's identical to CommitShaEQ.
func CommitSha(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldCommitSha, v))
}

// Actor applies equality check predicate on the "actor" field. It's identical to ActorEQ.
func Actor(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldActor, v))
}

// Refs applies equality check predicate on the "refs" field. It's identical to RefsEQ.
func Refs(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldRefs, v))
}

// RunID applies equality check predicate on the "run_id" field. It's identical to RunIDEQ.
func RunID(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldRunID, v))
}

// RepoURLEQ applies the EQ predicate on the "repo_url" field.
func RepoURLEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldRepoURL, v))
}

// RepoURLNEQ applies the NEQ predicate on the "repo_url" field.
func RepoURLNEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNEQ(FieldRepoURL, v))
}

// RepoURLIn applies the In predicate on the "repo_url" field.
func RepoURLIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIn(FieldRepoURL, vs...))
}

// RepoURLNotIn applies the NotIn predicate on the "repo_url" field.
func RepoURLNotIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotIn(FieldRepoURL, vs...))
}

// RepoURLGT applies the GT predicate on the "repo_url" field.
func RepoURLGT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGT(FieldRepoURL, v))
}

// RepoURLGTE applies the GTE predicate on the "repo_url" field.
func RepoURLGTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGTE(FieldRepoURL, v))
}

// RepoURLLT applies the LT predicate on the "repo_url" field.
func RepoURLLT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLT(FieldRepoURL, v))
}

// RepoURLLTE applies the LTE predicate on the "repo_url" field.
func RepoURLLTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLTE(FieldRepoURL, v))
}

// RepoURLContains applies the Contains predicate on the "repo_url" field.
func RepoURLContains(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContains(FieldRepoURL, v))
}

// RepoURLHasPrefix applies the HasPrefix predicate on the "repo_url" field.
func RepoURLHasPrefix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasPrefix(FieldRepoURL, v))
}

// RepoURLHasSuffix applies the HasSuffix predicate on the "repo_url" field.
func RepoURLHasSuffix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasSuffix(FieldRepoURL, v))
}

// RepoURLIsNil applies the IsNil predicate on the "repo_url" field.
func RepoURLIsNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIsNull(FieldRepoURL))
}

// RepoURLNotNil applies the NotNil predicate on the "repo_url" field.
func RepoURLNotNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotNull(FieldRepoURL))
}

// RepoURLEqualFold applies the EqualFold predicate on the "repo_url" field.
func RepoURLEqualFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEqualFold(FieldRepoURL, v))
}

// RepoURLContainsFold applies the ContainsFold predicate on the "repo_url" field.
func RepoURLContainsFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContainsFold(FieldRepoURL, v))
}

// BranchEQ applies the EQ predicate on the "branch" field.
func BranchEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldBranch, v))
}

// BranchNEQ applies the NEQ predicate on the "branch" field.
func BranchNEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNEQ(FieldBranch, v))
}

// BranchIn applies the In predicate on the "branch" field.
func BranchIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIn(FieldBranch, vs...))
}

// BranchNotIn applies the NotIn predicate on the "branch" field.
func BranchNotIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotIn(FieldBranch, vs...))
}

// BranchGT applies the GT predicate on the "branch" field.
func BranchGT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGT(FieldBranch, v))
}

// BranchGTE applies the GTE predicate on the "branch" field.
func BranchGTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGTE(FieldBranch, v))
}

// BranchLT applies the LT predicate on the "branch" field.
func BranchLT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLT(FieldBranch, v))
}

// BranchLTE applies the LTE predicate on the "branch" field.
func BranchLTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLTE(FieldBranch, v))
}

// BranchContains applies the Contains predicate on the "branch" field.
func BranchContains(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContains(FieldBranch, v))
}

// BranchHasPrefix applies the HasPrefix predicate on the "branch" field.
func BranchHasPrefix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasPrefix(FieldBranch, v))
}

// BranchHasSuffix applies the HasSuffix predicate on the "branch" field.
func BranchHasSuffix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasSuffix(FieldBranch, v))
}

// BranchIsNil applies the IsNil predicate on the "branch" field.
func BranchIsNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIsNull(FieldBranch))
}

// BranchNotNil applies the NotNil predicate on the "branch" field.
func BranchNotNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotNull(FieldBranch))
}

// BranchEqualFold applies the EqualFold predicate on the "branch" field.
func BranchEqualFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEqualFold(FieldBranch, v))
}

// BranchContainsFold applies the ContainsFold predicate on the "branch" field.
func BranchContainsFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContainsFold(FieldBranch, v))
}

// CommitShaEQ applies the EQ predicate on the "commit_sha" field.
func CommitShaEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldCommitSha, v))
}

// CommitShaNEQ applies the NEQ predicate on the "commit_sha" field.
func CommitShaNEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNEQ(FieldCommitSha, v))
}

// CommitShaIn applies the In predicate on the "commit_sha" field.
func CommitShaIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIn(FieldCommitSha, vs...))
}

// CommitShaNotIn applies the NotIn predicate on the "commit_sha" field.
func CommitShaNotIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotIn(FieldCommitSha, vs...))
}

// CommitShaGT applies the GT predicate on the "commit_sha" field.
func CommitShaGT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGT(FieldCommitSha, v))
}

// CommitShaGTE applies the GTE predicate on the "commit_sha" field.
func CommitShaGTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGTE(FieldCommitSha, v))
}

// CommitShaLT applies the LT predicate on the "commit_sha" field.
func CommitShaLT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLT(FieldCommitSha, v))
}

// CommitShaLTE applies the LTE predicate on the "commit_sha" field.
func CommitShaLTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLTE(FieldCommitSha, v))
}

// CommitShaContains applies the Contains predicate on the "commit_sha" field.
func CommitShaContains(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContains(FieldCommitSha, v))
}

// CommitShaHasPrefix applies the HasPrefix predicate on the "commit_sha" field.
func CommitShaHasPrefix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasPrefix(FieldCommitSha, v))
}

// CommitShaHasSuffix applies the HasSuffix predicate on the "commit_sha" field.
func CommitShaHasSuffix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasSuffix(FieldCommitSha, v))
}

// CommitShaIsNil applies the IsNil predicate on the "commit_sha" field.
func CommitShaIsNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIsNull(FieldCommitSha))
}

// CommitShaNotNil applies the NotNil predicate on the "commit_sha" field.
func CommitShaNotNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotNull(FieldCommitSha))
}

// CommitShaEqualFold applies the EqualFold predicate on the "commit_sha" field.
func CommitShaEqualFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEqualFold(FieldCommitSha, v))
}

// CommitShaContainsFold applies the ContainsFold predicate on the "commit_sha" field.
func CommitShaContainsFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContainsFold(FieldCommitSha, v))
}

// ActorEQ applies the EQ predicate on the "actor" field.
func ActorEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldActor, v))
}

// ActorNEQ applies the NEQ predicate on the "actor" field.
func ActorNEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNEQ(FieldActor, v))
}

// ActorIn applies the In predicate on the "actor" field.
func ActorIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIn(FieldActor, vs...))
}

// ActorNotIn applies the NotIn predicate on the "actor" field.
func ActorNotIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotIn(FieldActor, vs...))
}

// ActorGT applies the GT predicate on the "actor" field.
func ActorGT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGT(FieldActor, v))
}

// ActorGTE applies the GTE predicate on the "actor" field.
func ActorGTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGTE(FieldActor, v))
}

// ActorLT applies the LT predicate on the "actor" field.
func ActorLT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLT(FieldActor, v))
}

// ActorLTE applies the LTE predicate on the "actor" field.
func ActorLTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLTE(FieldActor, v))
}

// ActorContains applies the Contains predicate on the "actor" field.
func ActorContains(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContains(FieldActor, v))
}

// ActorHasPrefix applies the HasPrefix predicate on the "actor" field.
func ActorHasPrefix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasPrefix(FieldActor, v))
}

// ActorHasSuffix applies the HasSuffix predicate on the "actor" field.
func ActorHasSuffix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasSuffix(FieldActor, v))
}

// ActorIsNil applies the IsNil predicate on the "actor" field.
func ActorIsNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIsNull(FieldActor))
}

// ActorNotNil applies the NotNil predicate on the "actor" field.
func ActorNotNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotNull(FieldActor))
}

// ActorEqualFold applies the EqualFold predicate on the "actor" field.
func ActorEqualFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEqualFold(FieldActor, v))
}

// ActorContainsFold applies the ContainsFold predicate on the "actor" field.
func ActorContainsFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContainsFold(FieldActor, v))
}

// RefsEQ applies the EQ predicate on the "refs" field.
func RefsEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldRefs, v))
}

// RefsNEQ applies the NEQ predicate on the "refs" field.
func RefsNEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNEQ(FieldRefs, v))
}

// RefsIn applies the In predicate on the "refs" field.
func RefsIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIn(FieldRefs, vs...))
}

// RefsNotIn applies the NotIn predicate on the "refs" field.
func RefsNotIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotIn(FieldRefs, vs...))
}

// RefsGT applies the GT predicate on the "refs" field.
func RefsGT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGT(FieldRefs, v))
}

// RefsGTE applies the GTE predicate on the "refs" field.
func RefsGTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGTE(FieldRefs, v))
}

// RefsLT applies the LT predicate on the "refs" field.
func RefsLT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLT(FieldRefs, v))
}

// RefsLTE applies the LTE predicate on the "refs" field.
func RefsLTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLTE(FieldRefs, v))
}

// RefsContains applies the Contains predicate on the "refs" field.
func RefsContains(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContains(FieldRefs, v))
}

// RefsHasPrefix applies the HasPrefix predicate on the "refs" field.
func RefsHasPrefix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasPrefix(FieldRefs, v))
}

// RefsHasSuffix applies the HasSuffix predicate on the "refs" field.
func RefsHasSuffix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasSuffix(FieldRefs, v))
}

// RefsIsNil applies the IsNil predicate on the "refs" field.
func RefsIsNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIsNull(FieldRefs))
}

// RefsNotNil applies the NotNil predicate on the "refs" field.
func RefsNotNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotNull(FieldRefs))
}

// RefsEqualFold applies the EqualFold predicate on the "refs" field.
func RefsEqualFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEqualFold(FieldRefs, v))
}

// RefsContainsFold applies the ContainsFold predicate on the "refs" field.
func RefsContainsFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContainsFold(FieldRefs, v))
}

// RunIDEQ applies the EQ predicate on the "run_id" field.
func RunIDEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEQ(FieldRunID, v))
}

// RunIDNEQ applies the NEQ predicate on the "run_id" field.
func RunIDNEQ(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNEQ(FieldRunID, v))
}

// RunIDIn applies the In predicate on the "run_id" field.
func RunIDIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIn(FieldRunID, vs...))
}

// RunIDNotIn applies the NotIn predicate on the "run_id" field.
func RunIDNotIn(vs ...string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotIn(FieldRunID, vs...))
}

// RunIDGT applies the GT predicate on the "run_id" field.
func RunIDGT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGT(FieldRunID, v))
}

// RunIDGTE applies the GTE predicate on the "run_id" field.
func RunIDGTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldGTE(FieldRunID, v))
}

// RunIDLT applies the LT predicate on the "run_id" field.
func RunIDLT(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLT(FieldRunID, v))
}

// RunIDLTE applies the LTE predicate on the "run_id" field.
func RunIDLTE(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldLTE(FieldRunID, v))
}

// RunIDContains applies the Contains predicate on the "run_id" field.
func RunIDContains(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContains(FieldRunID, v))
}

// RunIDHasPrefix applies the HasPrefix predicate on the "run_id" field.
func RunIDHasPrefix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasPrefix(FieldRunID, v))
}

// RunIDHasSuffix applies the HasSuffix predicate on the "run_id" field.
func RunIDHasSuffix(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldHasSuffix(FieldRunID, v))
}

// RunIDIsNil applies the IsNil predicate on the "run_id" field.
func RunIDIsNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldIsNull(FieldRunID))
}

// RunIDNotNil applies the NotNil predicate on the "run_id" field.
func RunIDNotNil() predicate.SourceControl {
	return predicate.SourceControl(sql.FieldNotNull(FieldRunID))
}

// RunIDEqualFold applies the EqualFold predicate on the "run_id" field.
func RunIDEqualFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldEqualFold(FieldRunID, v))
}

// RunIDContainsFold applies the ContainsFold predicate on the "run_id" field.
func RunIDContainsFold(v string) predicate.SourceControl {
	return predicate.SourceControl(sql.FieldContainsFold(FieldRunID, v))
}

// HasBazelInvocation applies the HasEdge predicate on the "bazel_invocation" edge.
func HasBazelInvocation() predicate.SourceControl {
	return predicate.SourceControl(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, BazelInvocationTable, BazelInvocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBazelInvocationWith applies the HasEdge predicate on the "bazel_invocation" edge with a given conditions (other predicates).
func HasBazelInvocationWith(preds ...predicate.BazelInvocation) predicate.SourceControl {
	return predicate.SourceControl(func(s *sql.Selector) {
		step := newBazelInvocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SourceControl) predicate.SourceControl {
	return predicate.SourceControl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SourceControl) predicate.SourceControl {
	return predicate.SourceControl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SourceControl) predicate.SourceControl {
	return predicate.SourceControl(sql.NotPredicates(p))
}
