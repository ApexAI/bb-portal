// Code generated by ent, DO NOT EDIT.

package sourcecontrol

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sourcecontrol type in the database.
	Label = "source_control"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRepoURL holds the string denoting the repo_url field in the database.
	FieldRepoURL = "repo_url"
	// FieldBranch holds the string denoting the branch field in the database.
	FieldBranch = "branch"
	// FieldCommitSha holds the string denoting the commit_sha field in the database.
	FieldCommitSha = "commit_sha"
	// FieldActor holds the string denoting the actor field in the database.
	FieldActor = "actor"
	// EdgeBazelInvocation holds the string denoting the bazel_invocation edge name in mutations.
	EdgeBazelInvocation = "bazel_invocation"
	// Table holds the table name of the sourcecontrol in the database.
	Table = "source_controls"
	// BazelInvocationTable is the table that holds the bazel_invocation relation/edge.
	BazelInvocationTable = "source_controls"
	// BazelInvocationInverseTable is the table name for the BazelInvocation entity.
	// It exists in this package in order to avoid circular dependency with the "bazelinvocation" package.
	BazelInvocationInverseTable = "bazel_invocations"
	// BazelInvocationColumn is the table column denoting the bazel_invocation relation/edge.
	BazelInvocationColumn = "bazel_invocation_source_control"
)

// Columns holds all SQL columns for sourcecontrol fields.
var Columns = []string{
	FieldID,
	FieldRepoURL,
	FieldBranch,
	FieldCommitSha,
	FieldActor,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "source_controls"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bazel_invocation_source_control",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SourceControl queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRepoURL orders the results by the repo_url field.
func ByRepoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepoURL, opts...).ToFunc()
}

// ByBranch orders the results by the branch field.
func ByBranch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranch, opts...).ToFunc()
}

// ByCommitSha orders the results by the commit_sha field.
func ByCommitSha(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommitSha, opts...).ToFunc()
}

// ByActor orders the results by the actor field.
func ByActor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActor, opts...).ToFunc()
}

// ByBazelInvocationField orders the results by bazel_invocation field.
func ByBazelInvocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBazelInvocationStep(), sql.OrderByField(field, opts...))
	}
}
func newBazelInvocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BazelInvocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, BazelInvocationTable, BazelInvocationColumn),
	)
}
