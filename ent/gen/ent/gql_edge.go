// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (bi *BazelInvocation) EventFile(ctx context.Context) (*EventFile, error) {
	result, err := bi.Edges.EventFileOrErr()
	if IsNotLoaded(err) {
		result, err = bi.QueryEventFile().Only(ctx)
	}
	return result, err
}

func (bi *BazelInvocation) Build(ctx context.Context) (*Build, error) {
	result, err := bi.Edges.BuildOrErr()
	if IsNotLoaded(err) {
		result, err = bi.QueryBuild().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (bip *BazelInvocationProblem) BazelInvocation(ctx context.Context) (*BazelInvocation, error) {
	result, err := bip.Edges.BazelInvocationOrErr()
	if IsNotLoaded(err) {
		result, err = bip.QueryBazelInvocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (b *Build) Invocations(ctx context.Context) (result []*BazelInvocation, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedInvocations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.InvocationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryInvocations().All(ctx)
	}
	return result, err
}

func (ef *EventFile) BazelInvocation(ctx context.Context) (*BazelInvocation, error) {
	result, err := ef.Edges.BazelInvocationOrErr()
	if IsNotLoaded(err) {
		result, err = ef.QueryBazelInvocation().Only(ctx)
	}
	return result, MaskNotFound(err)
}
